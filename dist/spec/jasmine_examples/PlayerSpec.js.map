{"version":3,"sources":["../../../spec/jasmine_examples/PlayerSpec.js"],"names":["describe","Player","require","Song","player","song","beforeEach","it","play","expect","currentlyPlayingSong","toEqual","toBePlaying","pause","isPlaying","toBeFalsy","not","resume","toBeTruthy","spyOn","makeFavorite","persistFavoriteStatus","toHaveBeenCalledWith","toThrowError"],"mappings":";;AAAAA,SAAS,QAAT,EAAmB,YAAW;AAC5B,MAAIC,SAASC,QAAQ,mCAAR,CAAb;AACA,MAAIC,OAAOD,QAAQ,iCAAR,CAAX;AACA,MAAIE,MAAJ;AACA,MAAIC,IAAJ;;AAEAC,aAAW,YAAW;AACpBF,aAAS,IAAIH,MAAJ,EAAT;AACAI,WAAO,IAAIF,IAAJ,EAAP;AACD,GAHD;;AAKAI,KAAG,+BAAH,EAAoC,YAAW;AAC7CH,WAAOI,IAAP,CAAYH,IAAZ;AACAI,WAAOL,OAAOM,oBAAd,EAAoCC,OAApC,CAA4CN,IAA5C;;AAEA;AACAI,WAAOL,MAAP,EAAeQ,WAAf,CAA2BP,IAA3B;AACD,GAND;;AAQAL,WAAS,2BAAT,EAAsC,YAAW;AAC/CM,eAAW,YAAW;AACpBF,aAAOI,IAAP,CAAYH,IAAZ;AACAD,aAAOS,KAAP;AACD,KAHD;;AAKAN,OAAG,mDAAH,EAAwD,YAAW;AACjEE,aAAOL,OAAOU,SAAd,EAAyBC,SAAzB;;AAEA;AACAN,aAAOL,MAAP,EAAeY,GAAf,CAAmBJ,WAAnB,CAA+BP,IAA/B;AACD,KALD;;AAOAE,OAAG,8BAAH,EAAmC,YAAW;AAC5CH,aAAOa,MAAP;AACAR,aAAOL,OAAOU,SAAd,EAAyBI,UAAzB;AACAT,aAAOL,OAAOM,oBAAd,EAAoCC,OAApC,CAA4CN,IAA5C;AACD,KAJD;AAKD,GAlBD;;AAoBA;AACAE,KAAG,2DAAH,EAAgE,YAAW;AACzEY,UAAMd,IAAN,EAAY,uBAAZ;;AAEAD,WAAOI,IAAP,CAAYH,IAAZ;AACAD,WAAOgB,YAAP;;AAEAX,WAAOJ,KAAKgB,qBAAZ,EAAmCC,oBAAnC,CAAwD,IAAxD;AACD,GAPD;;AASA;AACAtB,WAAS,SAAT,EAAoB,YAAW;AAC7BO,OAAG,sDAAH,EAA2D,YAAW;AACpEH,aAAOI,IAAP,CAAYH,IAAZ;;AAEAI,aAAO,YAAW;AAChBL,eAAOa,MAAP;AACD,OAFD,EAEGM,YAFH,CAEgB,yBAFhB;AAGD,KAND;AAOD,GARD;AASD,CA3DD","file":"PlayerSpec.js","sourcesContent":["describe(\"Player\", function() {\n  var Player = require('../../lib/jasmine_examples/Player');\n  var Song = require('../../lib/jasmine_examples/Song');\n  var player;\n  var song;\n\n  beforeEach(function() {\n    player = new Player();\n    song = new Song();\n  });\n\n  it(\"should be able to play a Song\", function() {\n    player.play(song);\n    expect(player.currentlyPlayingSong).toEqual(song);\n\n    //demonstrates use of custom matcher\n    expect(player).toBePlaying(song);\n  });\n\n  describe(\"when song has been paused\", function() {\n    beforeEach(function() {\n      player.play(song);\n      player.pause();\n    });\n\n    it(\"should indicate that the song is currently paused\", function() {\n      expect(player.isPlaying).toBeFalsy();\n\n      // demonstrates use of 'not' with a custom matcher\n      expect(player).not.toBePlaying(song);\n    });\n\n    it(\"should be possible to resume\", function() {\n      player.resume();\n      expect(player.isPlaying).toBeTruthy();\n      expect(player.currentlyPlayingSong).toEqual(song);\n    });\n  });\n\n  // demonstrates use of spies to intercept and test method calls\n  it(\"tells the current song if the user has made it a favorite\", function() {\n    spyOn(song, 'persistFavoriteStatus');\n\n    player.play(song);\n    player.makeFavorite();\n\n    expect(song.persistFavoriteStatus).toHaveBeenCalledWith(true);\n  });\n\n  //demonstrates use of expected exceptions\n  describe(\"#resume\", function() {\n    it(\"should throw an exception if song is already playing\", function() {\n      player.play(song);\n\n      expect(function() {\n        player.resume();\n      }).toThrowError(\"song is already playing\");\n    });\n  });\n});\n"]}