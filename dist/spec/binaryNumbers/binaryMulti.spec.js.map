{"version":3,"sources":["../../../spec/binaryNumbers/binaryMulti.spec.js"],"names":["binaryMulti","require","BinaryNumberState","describe","it","n1","n2","result","expect","toJsNumber","toBe"],"mappings":";;AAAA,IAAIA,cAAcC,QAAQ,gDAAR,CAAlB;AACA,IAAIC,oBAAoBD,QAAQ,sDAAR,CAAxB;;AAEAE,SAAS,8BAAT,EAAyC,YAAY;AACjDC,OAAG,YAAH,EAAiB,YAAY;AACzB,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,CAAtB,CAAT;;AAEA,YAAIK,SAASP,YAAYK,EAAZ,EAAgBC,EAAhB,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,EAAjC;AACH,KAPD;;AASAN,OAAG,YAAH,EAAiB,YAAY;AACzB,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,CAAtB,CAAT;;AAEA,YAAIK,SAASP,YAAYK,EAAZ,EAAgBC,EAAhB,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,EAAjC;AACH,KAPD;;AASAN,OAAG,YAAH,EAAiB,YAAY;AACzB,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,CAAtB,CAAT;;AAEA,YAAIK,SAASP,YAAYK,EAAZ,EAAgBC,EAAhB,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,EAAjC;AACH,KAPD;;AASAN,OAAG,cAAH,EAAmB,YAAY;AAC3B,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAC,CAAvB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,CAAC,CAAvB,CAAT;;AAEA,YAAIK,SAASP,YAAYK,EAAZ,EAAgBC,EAAhB,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,EAAjC;AACH,KAPD;;AASAN,OAAG,cAAH,EAAmB,YAAY;AAC3B,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAC,CAAvB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,CAAtB,CAAT;;AAEA,YAAIK,SAASP,YAAYK,EAAZ,EAAgBC,EAAhB,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,CAAC,EAAlC;AACH,KAPD;AAQH,CA7CD","file":"binaryMulti.spec.js","sourcesContent":["let binaryMulti = require('../../src/app/binaryNumbers/simple/binaryMulti');\nlet BinaryNumberState = require('../../src/app/binaryNumbers/simple/BinaryNumberState');\n\ndescribe(\"Binary Number Multiplication\", function () {\n    it(\"5 * 7 = 35\", function () {\n        let n1 = new BinaryNumberState(5);\n        let n2 = new BinaryNumberState(7);\n\n        let result = binaryMulti(n1, n2);\n\n        expect(result.toJsNumber()).toBe(35);\n    });\n\n    it(\"6 * 7 = 42\", function () {\n        let n1 = new BinaryNumberState(6);\n        let n2 = new BinaryNumberState(7);\n\n        let result = binaryMulti(n1, n2);\n\n        expect(result.toJsNumber()).toBe(42);\n    });\n\n    it(\"6 * 6 = 36\", function () {\n        let n1 = new BinaryNumberState(6);\n        let n2 = new BinaryNumberState(6);\n\n        let result = binaryMulti(n1, n2);\n\n        expect(result.toJsNumber()).toBe(36);\n    });\n\n    it(\"-6 * -6 = 36\", function () {\n        let n1 = new BinaryNumberState(-6);\n        let n2 = new BinaryNumberState(-6);\n\n        let result = binaryMulti(n1, n2);\n\n        expect(result.toJsNumber()).toBe(36);\n    });\n\n    it(\"-6 * 6 = -36\", function () {\n        let n1 = new BinaryNumberState(-6);\n        let n2 = new BinaryNumberState(6);\n\n        let result = binaryMulti(n1, n2);\n\n        expect(result.toJsNumber()).toBe(-36);\n    });\n});"]}