{"version":3,"sources":["../../../spec/binaryNumbers/binaryNumber.spec.js"],"names":["BinaryNumber","require","BinaryFraction","BinaryNumberState","MixedNumeral","describe","it","n1","expect","toJsNumber","toFixed","toBe","n2","add"],"mappings":";;AAAA,IAAIA,eAAeC,QAAQ,0CAAR,CAAnB;AACA,IAAIC,iBAAiBD,QAAQ,mDAAR,CAArB;AACA,IAAIE,oBAAoBF,QAAQ,gEAAR,CAAxB;AACA,IAAIG,eAAeH,QAAQ,iDAAR,CAAnB;;AAEAI,SAAS,4BAAT,EAAuC,YAAY;AAC/CC,OAAG,mBAAH,EAAwB,YAAY;AAChC,YAAIC,KAAK,IAAIP,YAAJ,CAAiB,IAAII,YAAJ,CAAiB,CAAjB,EAAoB,IAAIF,cAAJ,CAAmB,CAAnB,EAAsB,CAAtB,CAApB,CAAjB,CAAT;;AAEAM,eAAOD,GAAGE,UAAH,GAAgBC,OAAhB,CAAwB,CAAxB,CAAP,EAAmCC,IAAnC,CAAwC,MAAMD,OAAN,CAAc,CAAd,CAAxC;AACH,KAJD;;AAMAJ,OAAG,iBAAH,EAAsB,YAAY;AAC9B,YAAIC,KAAK,IAAIP,YAAJ,CAAiB,MAAjB,CAAT;;AAEAQ,eAAOD,GAAGE,UAAH,GAAgBC,OAAhB,CAAwB,CAAxB,CAAP,EAAmCC,IAAnC,CAAwC,MAAMD,OAAN,CAAc,CAAd,CAAxC;AACH,KAJD;;AAMAJ,OAAG,iEAAH,EAAsE,YAAY;AAC9E,YAAIC,KAAK,IAAIP,YAAJ,CAAiB,IAAII,YAAJ,CAAiB,CAAjB,EAAmB,IAAIF,cAAJ,CAAmB,CAAnB,EAAqB,CAArB,CAAnB,CAAjB,CAAT;AACA,YAAIU,KAAK,IAAIZ,YAAJ,CAAiB,IAAII,YAAJ,CAAiB,CAAjB,EAAoB,IAAIF,cAAJ,CAAmB,CAAnB,EAAsB,CAAtB,CAApB,CAAjB,CAAT;;AAEAK,WAAGM,GAAH,CAAOD,EAAP;;AAEAJ,eAAOD,GAAGE,UAAH,GAAgBC,OAAhB,CAAwB,CAAxB,CAAP,EAAmCC,IAAnC,CAAwC,MAAMD,OAAN,CAAc,CAAd,CAAxC;AACH,KAPD;;AASAJ,OAAG,uBAAH,EAA4B,YAAY;AACpC,YAAIC,KAAK,IAAIP,YAAJ,CAAiB,IAAII,YAAJ,CAAiB,CAAjB,EAAoB,IAAIF,cAAJ,CAAmB,CAAnB,EAAsB,CAAtB,CAApB,CAAjB,CAAT;AACA,YAAIU,KAAK,IAAIZ,YAAJ,CAAiB,IAAII,YAAJ,CAAiB,CAAjB,EAAoB,IAAIF,cAAJ,CAAmB,CAAnB,EAAsB,CAAtB,CAApB,CAAjB,CAAT;;AAEAK,WAAGM,GAAH,CAAOD,EAAP;;AAEAJ,eAAOD,GAAGE,UAAH,GAAgBC,OAAhB,CAAwB,CAAxB,CAAP,EAAmCC,IAAnC,CAAwC,MAAMD,OAAN,CAAc,CAAd,CAAxC;AACH,KAPD;;AASAJ,OAAG,uBAAH,EAA4B,YAAY;AACpC,YAAIC,KAAK,IAAIP,YAAJ,CAAiB,MAAjB,CAAT;AACA,YAAIY,KAAK,IAAIZ,YAAJ,CAAiB,KAAjB,CAAT;;AAEAO,WAAGM,GAAH,CAAOD,EAAP;;AAEAJ,eAAOD,GAAGE,UAAH,GAAgBC,OAAhB,CAAwB,CAAxB,CAAP,EAAmCC,IAAnC,CAAwC,MAAMD,OAAN,CAAc,CAAd,CAAxC;AACH,KAPD;AASH,CAxCD","file":"binaryNumber.spec.js","sourcesContent":["let BinaryNumber = require('../../src/app/binaryNumbers/BinaryNumber');\nlet BinaryFraction = require('../../src/app/binaryNumbers/simple/BinaryFraction');\nlet BinaryNumberState = require('../../src/app/binaryNumbers/simple/low-level/BinaryNumberState');\nlet MixedNumeral = require('../../src/app/binaryNumbers/simple/MixedNumeral');\n\ndescribe(\"Binary Number Fraction Add\", function () {\n    it(\"1.333 to be 1.333\", function () {\n        let n1 = new BinaryNumber(new MixedNumeral(1, new BinaryFraction(1, 3)));\n\n        expect(n1.toJsNumber().toFixed(3)).toBe(1.333.toFixed(3));\n    });\n\n    it(\"1.25 to be 1.25\", function () {\n        let n1 = new BinaryNumber(\"1.25\");\n\n        expect(n1.toJsNumber().toFixed(3)).toBe(1.250.toFixed(3));\n    });\n\n    it(\"1.333 + 1.333 to be 2.667 (js numbers round up when parsed out)\", function () {\n        let n1 = new BinaryNumber(new MixedNumeral(1,new BinaryFraction(1,3)));\n        let n2 = new BinaryNumber(new MixedNumeral(1, new BinaryFraction(1, 3)));\n\n        n1.add(n2);\n\n        expect(n1.toJsNumber().toFixed(3)).toBe(2.667.toFixed(3));\n    });\n\n    it(\"1.25 + 1.5 to be 2.75\", function () {\n        let n1 = new BinaryNumber(new MixedNumeral(1, new BinaryFraction(1, 4)));\n        let n2 = new BinaryNumber(new MixedNumeral(1, new BinaryFraction(1, 2)));\n\n        n1.add(n2);\n\n        expect(n1.toJsNumber().toFixed(3)).toBe(2.750.toFixed(3));\n    });\n\n    it(\"1.25 + 1.5 to be 2.75\", function () {\n        let n1 = new BinaryNumber(\"1.25\");\n        let n2 = new BinaryNumber(\"1.5\");\n\n        n1.add(n2);\n\n        expect(n1.toJsNumber().toFixed(3)).toBe(2.750.toFixed(3));\n    });\n\n});"]}