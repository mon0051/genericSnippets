{"version":3,"sources":["../../../spec/binaryNumbers/binaryNumbers.spec.js"],"names":["binaryAdd","require","BinaryNumberState","describe","it","n1","expect","toJsNumber","toBe","n2","result"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,4CAAR,CAAhB;AACA,IAAIC,oBAAoBD,QAAQ,+CAAR,CAAxB;;AAEAE,SAAS,0BAAT,EAAqC,YAAY;;AAE7CC,OAAG,uBAAH,EAA6B,YAAY;AACrC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;;AAEAI,eAAOD,GAAGE,UAAH,EAAP,EAAwBC,IAAxB,CAA6B,CAA7B;AACH,KAJD;;AAMAJ,OAAG,uBAAH,EAA4B,YAAY;AACpC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;;AAEAI,eAAOD,GAAGE,UAAH,EAAP,EAAwBC,IAAxB,CAA6B,CAA7B;AACH,KAJD;;AAMAJ,OAAG,yBAAH,EAA8B,YAAY;AACtC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,GAAtB,CAAT;;AAEAI,eAAOD,GAAGE,UAAH,EAAP,EAAwBC,IAAxB,CAA6B,GAA7B;AACH,KAJD;;AAMAJ,OAAG,wBAAH,EAA6B,YAAY;AACrC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,IAAtB,CAAT;;AAEAI,eAAOD,GAAGE,UAAH,EAAP,EAAwBC,IAAxB,CAA6B,IAA7B;AACH,KAJD;;AAMAJ,OAAG,yBAAH,EAA8B,YAAY;AACtC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;AACA,YAAIO,KAAK,IAAIP,iBAAJ,CAAsB,CAAtB,CAAT;;AAEA,YAAIQ,SAASV,UAAUK,EAAV,EAAcI,EAAd,CAAb;;AAEAH,eAAOI,OAAOH,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,EAAjC;AACH,KAPD;;AASAJ,OAAG,0BAAH,EAA+B,YAAY;AACvC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;AACA,YAAIO,KAAK,IAAIP,iBAAJ,CAAsB,CAAtB,CAAT;;AAEA,YAAIQ,SAASV,UAAUK,EAAV,EAAcI,EAAd,CAAb;;AAEAH,eAAOI,OAAOH,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,EAAjC;AACH,KAPD;;AASAJ,OAAG,2BAAH,EAAgC,YAAY;AACxC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;AACA,YAAIO,KAAK,IAAIP,iBAAJ,CAAsB,CAAtB,CAAT;;AAEA,YAAIQ,SAASV,UAAUK,EAAV,EAAcI,EAAd,CAAb;;AAEAH,eAAOI,OAAOH,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,EAAjC;AACH,KAPD;AAQH,CApDD","file":"binaryNumbers.spec.js","sourcesContent":["var binaryAdd = require('../../src/app/binaryNumbers/binaryAddition');\nvar BinaryNumberState = require('../../src/app/binaryNumbers/binaryNumberState');\n\ndescribe(\"Binary Number Test Suite\", function () {\n\n    it(\"numbers 1 holds value\" , function () {\n        let n1 = new BinaryNumberState(1);\n\n        expect(n1.toJsNumber()).toBe(1);\n    });\n\n    it(\"numbers 0 holds value\", function () {\n        let n1 = new BinaryNumberState(0);\n\n        expect(n1.toJsNumber()).toBe(0);\n    });\n\n    it(\"even number holds value\", function () {\n        let n1 = new BinaryNumberState(222);\n\n        expect(n1.toJsNumber()).toBe(222);\n    });\n    \n    it(\"odd number holds value\", function () {\n        let n1 = new BinaryNumberState(1001);\n\n        expect(n1.toJsNumber()).toBe(1001);\n    });\n\n    it(\"odd plus odd 5 + 7 = 12\", function () {\n        let n1 = new BinaryNumberState(5);\n        let n2 = new BinaryNumberState(7);\n\n        let result = binaryAdd(n1, n2);\n\n        expect(result.toJsNumber()).toBe(12);\n    });\n\n    it(\"even plus odd 6 + 7 = 13\", function () {\n        let n1 = new BinaryNumberState(6);\n        let n2 = new BinaryNumberState(7);\n\n        let result = binaryAdd(n1, n2);\n\n        expect(result.toJsNumber()).toBe(13);\n    });\n\n    it(\"even plus even 6 + 6 = 12\", function () {\n        let n1 = new BinaryNumberState(6);\n        let n2 = new BinaryNumberState(6);\n\n        let result = binaryAdd(n1, n2);\n\n        expect(result.toJsNumber()).toBe(12);\n    });\n});"]}