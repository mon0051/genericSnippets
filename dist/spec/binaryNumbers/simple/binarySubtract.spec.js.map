{"version":3,"sources":["../../../../spec/binaryNumbers/simple/binarySubtract.spec.js"],"names":["binarySub","require","BinaryNumberState","describe","it","n1","n2","result","expect","toJsNumber","toBe"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,sDAAR,CAAhB;AACA,IAAIC,oBAAoBD,QAAQ,mEAAR,CAAxB;;AAEAE,SAAS,2BAAT,EAAsC,YAAY;AAC9CC,OAAG,wBAAH,EAA6B,YAAY;AACrC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,CAAtB,CAAT;;AAEA,YAAIK,SAASP,UAAUK,EAAV,EAAcC,EAAd,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,CAAC,CAAlC;AACH,KAPD;;AASAN,OAAG,0BAAH,EAA+B,YAAY;AACvC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,CAAC,CAAvB,CAAT;;AAEA,YAAIK,SAASP,UAAUK,EAAV,EAAcC,EAAd,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,EAAjC;AACH,KAPD;;AASAN,OAAG,4BAAH,EAAiC,YAAY;AACzC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAtB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,EAAtB,CAAT;;AAEA,YAAIK,SAASP,UAAUK,EAAV,EAAcC,EAAd,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,CAAC,EAAlC;AACH,KAPD;;AASAN,OAAG,qBAAH,EAAyB,YAAY;AACjC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,IAAtB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,GAAtB,CAAT;;AAEA,YAAIK,SAASP,UAAUK,EAAV,EAAaC,EAAb,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,IAAjC;AACH,KAPD;;AASAN,OAAG,cAAH,EAAkB,YAAY;AAC1B,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,GAAtB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,CAAtB,CAAT;;AAEA,YAAIK,SAASP,UAAUK,EAAV,EAAaC,EAAb,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,GAAjC;AACH,KAPD;;AASAN,OAAG,sBAAH,EAA2B,YAAY;AACnC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAC,EAAvB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,CAAC,EAAvB,CAAT;;AAEA,YAAIK,SAASP,UAAUK,EAAV,EAAcC,EAAd,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,CAAjC;AACH,KAPD;;AASAN,OAAG,wBAAH,EAA4B,YAAY;AACpC,YAAIC,KAAK,IAAIH,iBAAJ,CAAsB,CAAC,EAAvB,CAAT;AACA,YAAII,KAAK,IAAIJ,iBAAJ,CAAsB,EAAtB,CAAT;;AAEA,YAAIK,SAASP,UAAUK,EAAV,EAAcC,EAAd,CAAb;;AAEAE,eAAOD,OAAOE,UAAP,EAAP,EAA4BC,IAA5B,CAAiC,CAAC,EAAlC;AACH,KAPD;AAQH,CA/DD","file":"binarySubtract.spec.js","sourcesContent":["let binarySub = require('../../../src/app/binaryNumbers/simple/binarySubtract');\nlet BinaryNumberState = require('../../../src/app/binaryNumbers/simple/low-level/BinaryNumberState');\n\ndescribe(\"Binary Number Subtraction\", function () {\n    it(\"odd sub odd 5 - 7 = -2\", function () {\n        let n1 = new BinaryNumberState(5);\n        let n2 = new BinaryNumberState(7);\n\n        let result = binarySub(n1, n2);\n\n        expect(result.toJsNumber()).toBe(-2);\n    });\n\n    it(\"even plus odd 6 - 7 = -1\", function () {\n        let n1 = new BinaryNumberState(6);\n        let n2 = new BinaryNumberState(-7);\n\n        let result = binarySub(n1, n2);\n\n        expect(result.toJsNumber()).toBe(13);\n    });\n\n    it(\"even sub even 6 - 16 = -10\", function () {\n        let n1 = new BinaryNumberState(6);\n        let n2 = new BinaryNumberState(16);\n\n        let result = binarySub(n1, n2);\n\n        expect(result.toJsNumber()).toBe(-10);\n    });\n\n    it(\"bigger take smaller\",function () {\n        let n1 = new BinaryNumberState(1600);\n        let n2 = new BinaryNumberState(600);\n        \n        let result = binarySub(n1,n2);\n\n        expect(result.toJsNumber()).toBe(1000);\n    });\n\n    it(\"take nothing\",function () {\n        let n1 = new BinaryNumberState(100);\n        let n2 = new BinaryNumberState(0);\n\n        let result = binarySub(n1,n2);\n\n        expect(result.toJsNumber()).toBe(100);\n    });\n\n    it(\"two negatives cancel\" ,function () {\n        let n1 = new BinaryNumberState(-10);\n        let n2 = new BinaryNumberState(-10);\n\n        let result = binarySub(n1, n2);\n\n        expect(result.toJsNumber()).toBe(0);\n    });\n\n    it(\"negative take positive\",function () {\n        let n1 = new BinaryNumberState(-10);\n        let n2 = new BinaryNumberState(10);\n\n        let result = binarySub(n1, n2);\n\n        expect(result.toJsNumber()).toBe(-20);\n    })\n});"]}