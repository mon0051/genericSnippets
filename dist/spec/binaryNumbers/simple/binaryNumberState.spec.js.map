{"version":3,"sources":["../../../../spec/binaryNumbers/simple/binaryNumberState.spec.js"],"names":["BinaryNumberState","require","describe","it","n1","expect","toJsNumber","toBe"],"mappings":";;AAAA,IAAIA,oBAAoBC,QAAQ,mEAAR,CAAxB;;AAEAC,SAAS,0BAAT,EAAqC,YAAY;;AAE7CC,OAAG,uBAAH,EAA6B,YAAY;AACrC,YAAIC,KAAK,IAAIJ,iBAAJ,CAAsB,CAAtB,CAAT;;AAEAK,eAAOD,GAAGE,UAAH,EAAP,EAAwBC,IAAxB,CAA6B,CAA7B;AACH,KAJD;;AAMAJ,OAAG,uBAAH,EAA4B,YAAY;AACpC,YAAIC,KAAK,IAAIJ,iBAAJ,CAAsB,CAAtB,CAAT;;AAEAK,eAAOD,GAAGE,UAAH,EAAP,EAAwBC,IAAxB,CAA6B,CAA7B;AACH,KAJD;;AAMAJ,OAAG,yBAAH,EAA8B,YAAY;AACtC,YAAIC,KAAK,IAAIJ,iBAAJ,CAAsB,GAAtB,CAAT;;AAEAK,eAAOD,GAAGE,UAAH,EAAP,EAAwBC,IAAxB,CAA6B,GAA7B;AACH,KAJD;;AAMAJ,OAAG,wBAAH,EAA6B,YAAY;AACrC,YAAIC,KAAK,IAAIJ,iBAAJ,CAAsB,IAAtB,CAAT;;AAEAK,eAAOD,GAAGE,UAAH,EAAP,EAAwBC,IAAxB,CAA6B,IAA7B;AACH,KAJD;;AAMAJ,OAAG,iCAAH,EAAsC,YAAU;AAC5CE,eAAO,IAAIL,iBAAJ,CAAsB,CAAC,CAAvB,EAA0BM,UAA1B,EAAP,EAA+CC,IAA/C,CAAoD,CAAC,CAArD;AACH,KAFD;AAIH,CA9BD","file":"binaryNumberState.spec.js","sourcesContent":["let BinaryNumberState = require('../../../src/app/binaryNumbers/simple/low-level/BinaryNumberState');\n\ndescribe(\"Binary Number Test Suite\", function () {\n\n    it(\"numbers 1 holds value\" , function () {\n        let n1 = new BinaryNumberState(1);\n\n        expect(n1.toJsNumber()).toBe(1);\n    });\n\n    it(\"numbers 0 holds value\", function () {\n        let n1 = new BinaryNumberState(0);\n\n        expect(n1.toJsNumber()).toBe(0);\n    });\n\n    it(\"even number holds value\", function () {\n        let n1 = new BinaryNumberState(222);\n\n        expect(n1.toJsNumber()).toBe(222);\n    });\n    \n    it(\"odd number holds value\", function () {\n        let n1 = new BinaryNumberState(1001);\n\n        expect(n1.toJsNumber()).toBe(1001);\n    });\n\n    it(\"remembers negative number state\", function(){\n        expect(new BinaryNumberState(-1).toJsNumber()).toBe(-1);\n    });\n\n});"]}