{"version":3,"sources":["../../../../src/app/binaryNumbers/binaryMagnitudeIncrease.js"],"names":["BinaryNumberState","require","carryBit","number","index","bits","addImpl","n1","n2","result","isPositive","map","x","forEach","value","binaryMagnitudeIncrease","length","module","exports"],"mappings":";;AAAA,IAAIA,oBAAoBC,QAAQ,qBAAR,CAAxB;;AAEA,SAASC,QAAT,CAAkBC,MAAlB,EAAyBC,KAAzB,EAA+B;AAC3B,QAAGD,OAAOE,IAAP,CAAYD,KAAZ,CAAH,EAAsB;AAClBD,eAAOE,IAAP,CAAYD,KAAZ,IAAqB,KAArB;AACAF,iBAASC,MAAT,EAAgBC,QAAM,CAAtB;AACH,KAHD,MAGK;AACDD,eAAOE,IAAP,CAAYD,KAAZ,IAAqB,IAArB;AACH;AACJ;;AAED,SAASE,OAAT,CAAiBC,EAAjB,EAAoBC,EAApB,EAAwB;AACpB,QAAIC,SAAS,IAAIT,iBAAJ,EAAb;AACAS,WAAOC,UAAP,GAAoBH,GAAGG,UAAvB;AACAD,WAAOJ,IAAP,GAAcE,GAAGF,IAAH,CAAQM,GAAR,CAAY;AAAA,eAAGC,CAAH;AAAA,KAAZ,CAAd;AACAJ,OAAGH,IAAH,CAAQQ,OAAR,CAAgB,UAASC,KAAT,EAAeV,KAAf,EAAqB;AACjC,YAAG,CAACU,KAAJ,EAAW;AACXZ,iBAASO,MAAT,EAAgBL,KAAhB;AACH,KAHD;;AAKA,WAAOK,MAAP;AACH;;AAED;;;;;AAKA,SAASM,uBAAT,CAAiCR,EAAjC,EAAoCC,EAApC,EAAuC;AACnC,QAAGD,GAAGG,UAAH,KAAkBF,GAAGE,UAAxB,EAAmC;AAC/B,cAAM,wCAAN;AACH;AACD,QAAGH,GAAGF,IAAH,CAAQW,MAAR,GAAiBR,GAAGH,IAAH,CAAQW,MAA5B,EAAmC;AAC/B,eAAOV,QAAQC,EAAR,EAAWC,EAAX,CAAP;AACH,KAFD,MAEK;AACD,eAAOF,QAAQE,EAAR,EAAWD,EAAX,CAAP;AACH;AACJ;;AAEDU,OAAOC,OAAP,GAAiBH,uBAAjB","file":"binaryMagnitudeIncrease.js","sourcesContent":["let BinaryNumberState = require('./binaryNumberState');\n\nfunction carryBit(number,index){\n    if(number.bits[index]){\n        number.bits[index] = false;\n        carryBit(number,index+1)\n    }else{\n        number.bits[index] = true;\n    }\n}\n\nfunction addImpl(n1,n2) {\n    let result = new BinaryNumberState();\n    result.isPositive = n1.isPositive;\n    result.bits = n1.bits.map(x=>x);\n    n2.bits.forEach(function(value,index){\n        if(!value) return;\n        carryBit(result,index);\n    });\n\n    return result;\n}\n\n/**\n *  @param {BinaryNumberState} n1\n *  @param {BinaryNumberState} n2\n *  @return {BinaryNumberState}\n **/\nfunction binaryMagnitudeIncrease(n1,n2){\n    if(n1.isPositive !== n2.isPositive){\n        throw \"Binary Number Sign must be same to add\";\n    }\n    if(n1.bits.length > n2.bits.length){\n        return addImpl(n1,n2);\n    }else{\n        return addImpl(n2,n1);\n    }\n}\n\nmodule.exports = binaryMagnitudeIncrease;\n"]}