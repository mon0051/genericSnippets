{"version":3,"sources":["../../../../src/app/binaryNumbers/binaryDecrease.js"],"names":["BinaryNumberState","require","bigger","n1","n2","bits","length","i","trimZeros","number","slice","borrowBit","index","undefined","subImpl","result","isPositive","binarySub","n1Bigger","magnitudeDifference","module","exports"],"mappings":"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","file":"binaryDecrease.js","sourcesContent":["let BinaryNumberState = require('./binaryNumberState');\n\n\nfunction bigger(n1,n2){\n    if(n1.bits.length > n2.bits.length){\n        return true;\n    }\n    if(n2.bits.length > n1.bits.length){\n        return false;\n    }\n    for(let i = (n1.bits.length-1); i > 0; i--){\n        if(n1.bits[i] === n2.bits[i]){\n            continue;\n        }\n        return n1.bits[i];\n    }\n    return false;\n}\n/**\n * @param {BinaryNumberState} number\n */\nfunction trimZeros(number){\n    if(number.bits[number.bits.length-1] === true){\n        return;\n    }\n\n    for(let i = (number.bits.length-1); i >= 0; i--){\n        if(number.bits[i] === true){\n            number.bits = number.bits.slice(0,i+1);\n            return;\n        }\n    }\n}\n\n/**\n * @param {BinaryNumberState} number\n * @param {number} index\n */\nfunction borrowBit(number, index) {\n    if(index === (number.bits.length - 1) && number.bits[index] === false){\n        throw \"Bad borrow\";\n    }\n    if(typeof number.bits[index] === 'undefined' || number.bits[index] === null || number.bits[index] === undefined){\n        throw \"index out of bounds\";\n    }\n    if(number.bits[index] === true){\n        number.bits[index] = false;\n    }else{\n        number.bits[index] = true;\n        borrowBit(number, index + 1);\n    }\n\n}\n/**\n *\n * @param n1 {BinaryNumberState}\n * @param n2 {BinaryNumberState}\n * @returns {BinaryNumberState}\n */\nfunction subImpl(n1, n2) {\n    let result = new BinaryNumberState();\n    result.bits = n1.bits.slice();\n    result.isPositive = n1.isPositive;\n\n    for(let i = (n1.bits.length -1); i >= 0; i--){\n        if(!n2.bits[i]) continue;\n        borrowBit(result,i);\n    }\n\n    trimZeros(result);\n    return result;\n}\n\n/**\n *  @param n1 {BinaryNumberState}\n *  @param n2 {BinaryNumberState}\n *  @return {BinaryNumberState}\n **/\nfunction binarySub(n1, n2) {\n    if(n1.isPositive !== n2.isPositive){\n        throw \"Can't subtract numbers with opposite signs\";\n    }\n\n    let n1Bigger = bigger(n1,n2);\n\n    let magnitudeDifference = null;\n\n    if (n1Bigger === true) {\n        magnitudeDifference = subImpl(n1, n2);\n        magnitudeDifference.isPositive = n1.isPositive;\n    } else {\n        magnitudeDifference = subImpl(n2, n1);\n        magnitudeDifference.isPositive = !n1.isPositive;\n    }\n    return magnitudeDifference;\n}\n\nmodule.exports = binarySub;"]}