{"version":3,"sources":["../../../../src/app/binaryNumbers/BinaryNumber.js"],"names":["BinaryNumberState","require","binaryAdd","binarySubtract","binaryMultiply","simpleBinaryDivide","MixedNumeral","parse","inputNumber","toFixed","toString","BinaryNumber","number","that","state","toJsNumber","add","n","fraction","integer"],"mappings":";;AAAA,IAAIA,oBAAoBC,QAAQ,sCAAR,CAAxB;AACA,IAAIC,YAAYD,QAAQ,oBAAR,CAAhB;AACA,IAAIE,iBAAiBF,QAAQ,yBAAR,CAArB;AACA,IAAIG,iBAAiBH,QAAQ,sBAAR,CAArB;AACA,IAAII,qBAAqBJ,QAAQ,6BAAR,CAAzB;AACA,IAAIK,eAAeL,QAAQ,uBAAR,CAAnB;;AAEA;;;;AAIA,SAASM,KAAT,CAAeC,WAAf,EAA2B;AACvB,QAAG,OAAOA,WAAP,KAAuB,QAA1B,EAAmC;AAC/B,YAAGA,YAAYC,OAAZ,CAAoB,CAApB,IAAyBD,WAAzB,KAAyC,CAA5C,EAA8C;AAC1C,kBAAM,uEAAN;AACH;AACD,eAAO,IAAIF,YAAJ,CAAiB,IAAIN,iBAAJ,CAAsBQ,WAAtB,CAAjB,CAAP;AACH;AACD,QAAGA,YAAYE,QAAZ,OAA2B,uBAA9B,EAAsD;AAClD,eAAO,IAAIJ,YAAJ,CAAiBE,WAAjB,CAAP;AACH;AACD,WAAO,IAAIF,YAAJ,CAAiB,CAAjB,CAAP;AACH;;AAED;;;AAGA,SAASK,YAAT,CAAsBC,MAAtB,EAA6B;AACzB,QAAIC,OAAO,IAAX;AACA;;;AAGA,SAAKC,KAAL,GAAaP,MAAMK,MAAN,CAAb;;AAEA,SAAKG,UAAL,GAAkB,YAAY;AAC1B,eAAOF,KAAKC,KAAL,CAAWC,UAAX,EAAP;AACH,KAFD;;AAIA,SAAKC,GAAL,GAAW,UAAUJ,MAAV,EAAkB;AACzB,YAAIK,IAAIV,MAAMK,MAAN,CAAR;;AAEA,YAAGK,EAAEC,QAAF,CAAWH,UAAX,OAA4B,CAA5B,IAAiCF,KAAKC,KAAL,CAAWI,QAAX,CAAoBH,UAApB,OAAqC,CAAzE,EAA2E;AACvE,mBAAO,IAAIJ,YAAJ,CAAiB,IAAIL,YAAJ,CAAiBJ,UAAU,KAAKY,KAAL,CAAWK,OAArB,EAA8BF,EAAEE,OAAhC,CAAjB,CAAjB,CAAP;AACH;;AAED,cAAM,yCAAN;AACH,KARD;AASH","file":"BinaryNumber.js","sourcesContent":["let BinaryNumberState = require('./simple/low-level/BinaryNumberState');\nlet binaryAdd = require('./simple/binaryAdd');\nlet binarySubtract = require('./simple/binarySubtract');\nlet binaryMultiply = require('./simple/binaryMulti');\nlet simpleBinaryDivide = require('./simple/simpleBinaryDivide');\nlet MixedNumeral = require('./simple/MixedNumeral');\n\n/**\n * @param inputNumber {BinaryNumber|MixedNumeral|number|undefined|null}\n * @return {MixedNumeral}\n */\nfunction parse(inputNumber){\n    if(typeof inputNumber === 'number'){\n        if(inputNumber.toFixed(0) - inputNumber !== 0){\n            throw \"BinaryNumber can only accept integer values if JS number is passed in\";\n        }\n        return new MixedNumeral(new BinaryNumberState(inputNumber));\n    }\n    if(inputNumber.toString() === '[object BinaryNumber]'){\n        return new MixedNumeral(inputNumber);\n    }\n    return new MixedNumeral(0);\n}\n\n/**\n * @param number {BinaryNumber|MixedNumeral|number|undefined|null}\n */\nfunction BinaryNumber(number){\n    let that = this;\n    /**\n     * @type {MixedNumeral}\n     */\n    this.state = parse(number);\n\n    this.toJsNumber = function () {\n        return that.state.toJsNumber();\n    };\n\n    this.add = function (number) {\n        let n = parse(number);\n\n        if(n.fraction.toJsNumber() === 0 && that.state.fraction.toJsNumber() === 0){\n            return new BinaryNumber(new MixedNumeral(binaryAdd(this.state.integer, n.integer)));\n        }\n\n        throw \"Complex Numbers are not yet implemented\";\n    }\n}"]}