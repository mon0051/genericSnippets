{"version":3,"sources":["../../../../src/app/binaryNumbers/BinaryNumber.js"],"names":["BinaryNumberState","require","binaryAdd","binarySubtract","binaryMultiply","binaryFractionAdd","simpleBinaryDivide","MixedNumeral","BinaryFraction","parseBinaryNumberFromString","parse","inputNumber","toFixed","toString","integer","fraction","BinaryNumber","number","that","state","toJsNumber","add","n","module","exports"],"mappings":";;AAAA,IAAIA,oBAAoBC,QAAQ,sCAAR,CAAxB;AACA,IAAIC,YAAYD,QAAQ,oBAAR,CAAhB;AACA,IAAIE,iBAAiBF,QAAQ,yBAAR,CAArB;AACA,IAAIG,iBAAiBH,QAAQ,sBAAR,CAArB;AACA,IAAII,oBAAoBJ,QAAQ,4BAAR,CAAxB;AACA,IAAIK,qBAAqBL,QAAQ,6BAAR,CAAzB;AACA,IAAIM,eAAeN,QAAQ,uBAAR,CAAnB;AACA,IAAIO,iBAAiBP,QAAQ,yBAAR,CAArB;AACA,IAAIQ,8BAA8BR,QAAQ,+BAAR,CAAlC;;AAEA;;;;AAIA,SAASS,KAAT,CAAeC,WAAf,EAA2B;AACvB,QAAG,OAAOA,WAAP,KAAuB,QAA1B,EAAmC;AAC/B,eAAOF,4BAA4BE,WAA5B,CAAP;AACH;AACD,QAAG,OAAOA,WAAP,KAAuB,WAA1B,EAAsC;AAClC,eAAO,IAAIJ,YAAJ,EAAP;AACH;AACD,QAAG,OAAOI,WAAP,KAAuB,QAA1B,EAAmC;AAC/B,YAAGA,YAAYC,OAAZ,CAAoB,CAApB,IAAyBD,WAAzB,KAAyC,CAA5C,EAA8C;AAC1C,kBAAM,uEAAN;AACH;;AAED,eAAO,IAAIJ,YAAJ,CAAiB,IAAIP,iBAAJ,CAAsBW,WAAtB,CAAjB,CAAP;AACH;;AAED,QAAGA,YAAYE,QAAZ,OAA2B,uBAA9B,EAAsD;AAClD,eAAO,IAAIN,YAAJ,CAAiBI,YAAYG,OAA7B,EAAqCH,YAAYI,QAAjD,CAAP;AACH;;AAED,WAAO,IAAIR,YAAJ,EAAP;AACH;;AAED;;;AAGA,SAASS,YAAT,CAAsBC,MAAtB,EAA6B;AACzB,QAAIC,OAAO,IAAX;AACA;;;AAGA,SAAKC,KAAL,GAAaT,MAAMO,MAAN,CAAb;;AAEA,SAAKG,UAAL,GAAkB,YAAY;AAC1B,eAAOF,KAAKC,KAAL,CAAWC,UAAX,EAAP;AACH,KAFD;;AAIA;;;;AAIA,SAAKC,GAAL,GAAW,UAAUJ,MAAV,EAAkB;AACzB,YAAIK,IAAIL,MAAR;AACA,YAAGA,OAAOJ,QAAP,OAAsB,uBAAzB,EAAiD;AAC7CH,kBAAMO,MAAN;AACH;;AAED,YAAGK,EAAEH,KAAF,CAAQJ,QAAR,CAAiBK,UAAjB,OAAkC,CAAlC,IAAuCF,KAAKC,KAAL,CAAWJ,QAAX,CAAoBK,UAApB,OAAqC,CAA/E,EAAiF;AAC7E,mBAAO,IAAIJ,YAAJ,CAAiB,IAAIT,YAAJ,CAAiBL,UAAU,KAAKiB,KAAL,CAAWL,OAArB,EAA8BQ,EAAEH,KAAF,CAAQL,OAAtC,CAAjB,EAAiE,IAAIN,cAAJ,CAAmB,CAAnB,EAAqB,CAArB,CAAjE,CAAjB,CAAP;AACH;;AAEDU,aAAKC,KAAL,GAAa,IAAIH,YAAJ,CAAiB,IAAIT,YAAJ,CAAiBL,UAAU,KAAKiB,KAAL,CAAWL,OAArB,EAA6BQ,EAAEH,KAAF,CAAQL,OAArC,CAAjB,EAA+DT,kBAAkB,KAAKc,KAAL,CAAWJ,QAA7B,EAAsCO,EAAEH,KAAF,CAAQJ,QAA9C,CAA/D,CAAjB,CAAb;;AAEA,eAAOG,IAAP;AAEH,KAdD;;AAgBA,SAAKL,QAAL,GAAgB,YAAY;AACxB,eAAO,uBAAP;AACH,KAFD;AAGH;;AAEDU,OAAOC,OAAP,GAAiBR,YAAjB","file":"BinaryNumber.js","sourcesContent":["let BinaryNumberState = require('./simple/low-level/BinaryNumberState');\nlet binaryAdd = require('./simple/binaryAdd');\nlet binarySubtract = require('./simple/binarySubtract');\nlet binaryMultiply = require('./simple/binaryMulti');\nlet binaryFractionAdd = require('./simple/binaryFractionAdd');\nlet simpleBinaryDivide = require('./simple/simpleBinaryDivide');\nlet MixedNumeral = require('./simple/MixedNumeral');\nlet BinaryFraction = require('./simple/BinaryFraction');\nlet parseBinaryNumberFromString = require('./parseBinaryNumberFromString');\n\n/**\n * @param inputNumber {BinaryNumber|MixedNumeral|number|string|undefined|null}\n * @return {MixedNumeral}\n */\nfunction parse(inputNumber){\n    if(typeof inputNumber === \"string\"){\n        return parseBinaryNumberFromString(inputNumber);\n    }\n    if(typeof inputNumber === \"undefined\"){\n        return new MixedNumeral();\n    }\n    if(typeof inputNumber === 'number'){\n        if(inputNumber.toFixed(0) - inputNumber !== 0){\n            throw \"BinaryNumber can only accept integer values if JS number is passed in\";\n        }\n\n        return new MixedNumeral(new BinaryNumberState(inputNumber));\n    }\n\n    if(inputNumber.toString() === '[object MixedNumeral]'){\n        return new MixedNumeral(inputNumber.integer,inputNumber.fraction);\n    }\n\n    return new MixedNumeral();\n}\n\n/**\n * @param number {BinaryNumber|MixedNumeral|number|undefined|null}\n */\nfunction BinaryNumber(number){\n    let that = this;\n    /**\n     * @type {MixedNumeral}\n     */\n    this.state = parse(number);\n\n    this.toJsNumber = function () {\n        return that.state.toJsNumber();\n    };\n\n    /**\n     * @param {BinaryNumber} number\n     * @return {BinaryNumber}\n     */\n    this.add = function (number) {\n        let n = number;\n        if(number.toString() !== \"[object BinaryNumber]\"){\n            parse(number);\n        }\n\n        if(n.state.fraction.toJsNumber() === 0 && that.state.fraction.toJsNumber() === 0){\n            return new BinaryNumber(new MixedNumeral(binaryAdd(this.state.integer, n.state.integer), new BinaryFraction(0,1)));\n        }\n\n        that.state = new BinaryNumber(new MixedNumeral(binaryAdd(this.state.integer,n.state.integer),binaryFractionAdd(this.state.fraction,n.state.fraction)));\n\n        return that;\n\n    };\n\n    this.toString = function () {\n        return \"[object BinaryNumber]\"\n    }\n}\n\nmodule.exports = BinaryNumber;"]}