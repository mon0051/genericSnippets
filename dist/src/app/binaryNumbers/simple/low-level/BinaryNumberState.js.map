{"version":3,"sources":["../../../../../../src/app/binaryNumbers/simple/low-level/BinaryNumberState.js"],"names":["fromJsNumber","number","bits","isPositive","length","toFixed","fromBinaryNumberState","toString","slice","converterMap","BinaryNumberState","numberIn","that","converter","call","toJsNumber","forEach","value","index","Math","pow","isEqualValue","n2","every","module","exports"],"mappings":";;;;AAAA,SAASA,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,QAAIC,OAAO,EAAX;AACA,SAAKC,UAAL,GAAmBF,SAAS,CAA5B;AACA,QAAGA,SAAS,CAAZ,EAAc;AACVA,iBAASA,SAAU,CAAC,CAApB;AACH;AACD,WAAMA,UAAU,CAAhB,EAAkB;AACdC,aAAKA,KAAKE,MAAV,IAAqBH,SAAS,CAAT,GAAa,CAAlC;AACAA,iBAAUA,SAAS,CAAV,GAAgBA,SAAS,CAAlC;AACAA,iBAASA,OAAOI,OAAP,CAAe,CAAf,CAAT;AACH;AACD,QAAGJ,SAAS,CAAZ,EAAc;AACVC,aAAKA,KAAKE,MAAV,IAAoB,IAApB;AACH;AACD,SAAKF,IAAL,GAAYA,IAAZ;AAEH;;AAED,SAASI,qBAAT,CAA+BL,MAA/B,EAAsC;AAClC,QAAGA,OAAOM,QAAP,OAAsB,4BAAzB,EAAsD;AAClD,aAAKL,IAAL,GAAYD,OAAOC,IAAP,CAAYM,KAAZ,EAAZ;AACA,aAAKL,UAAL,GAAkBF,OAAOE,UAAzB;AACH,KAHD,MAGK;AACD,aAAKD,IAAL,GAAY,EAAZ;AACA,aAAKC,UAAL,GAAkB,IAAlB;AACH;AACJ;;AAED;AACA,IAAIM,eAAe;AACf,cAAWT,YADI;AAEf,cAAWM;AAFI,CAAnB;AAIA;;;;AAIA,SAASI,iBAAT,CAA2BC,QAA3B,EAAoC;AAChC,SAAKT,IAAL,GAAY,EAAZ;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,QAAIS,OAAO,IAAX;;AAEC,iBAAW;AACR,YAAIC,YAAYJ,oBAAoBE,QAApB,yCAAoBA,QAApB,EAAhB;AACA,YAAI,OAAOE,SAAP,KAAqB,UAAzB,EAAqC;AACjCA,sBAAUC,IAAV,CAAeF,IAAf,EAAqBD,QAArB;AACH;AACJ,KALA,GAAD;;AAOA,SAAKI,UAAL,GAAkB,YAAY;AAC1B,YAAIb,OAAO,KAAKA,IAAhB;AACA,YAAID,SAAS,CAAb;;AAEAC,aAAKc,OAAL,CAAa,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACjC,gBAAGD,KAAH,EAAS;AACLhB,0BAASkB,KAAKC,GAAL,CAAS,CAAT,EAAWF,KAAX,CAAT;AACH;AACJ,SAJD;;AAMA,YAAG,KAAKf,UAAL,KAAoB,IAAvB,EAA6B,OAAOF,MAAP;;AAE7B,eAAOA,SAAU,CAAC,CAAlB;AACH,KAbD;AAcA;;;;AAIA,SAAKoB,YAAL,GAAoB,UAAUC,EAAV,EAAc;AAC9B,YAAGA,GAAGf,QAAH,OAAkB,4BAArB,EAAkD;AAC9C,mBAAO,KAAP;AACH;AACD,eAAOK,KAAKV,IAAL,CAAUqB,KAAV,CAAgB,UAAUN,KAAV,EAAgBC,KAAhB,EAAuB;AAC1C,mBAAON,KAAKV,IAAL,CAAUgB,KAAV,MAAqBI,GAAGpB,IAAH,CAAQgB,KAAR,CAA5B;AACH,SAFM,CAAP;AAIH,KARD;;AAUA,SAAKX,QAAL,GAAgB,YAAY;AACxB,eAAO,4BAAP;AACH,KAFD;AAGH;;AAEDiB,OAAOC,OAAP,GAAiBf,iBAAjB","file":"BinaryNumberState.js","sourcesContent":["function fromJsNumber(number) {\n    let bits = [];\n    this.isPositive = (number > 0);\n    if(number < 0){\n        number = number * (-1);\n    }\n    while(number >= 1){\n        bits[bits.length] = (number % 2 > 0);\n        number = (number / 2) - (number % 2);\n        number = number.toFixed(0)\n    }\n    if(number > 0){\n        bits[bits.length] = true;\n    }\n    this.bits = bits;\n\n}\n\nfunction fromBinaryNumberState(number){\n    if(number.toString() === \"[object BinaryNumberState]\"){\n        this.bits = number.bits.slice();\n        this.isPositive = number.isPositive;\n    }else{\n        this.bits = [];\n        this.isPositive = true;\n    }\n}\n\n// TODO : Parse from string so we can easily enter numbers by hand\nlet converterMap = {\n    'number' : fromJsNumber,\n    'object' : fromBinaryNumberState\n};\n/**\n * @param {BinaryNumberState|number|undefined|null}numberIn\n * @constructor\n */\nfunction BinaryNumberState(numberIn){\n    this.bits = [];\n    this.isPositive = false;\n    let that = this;\n\n    (function (){\n        let converter = converterMap[typeof numberIn];\n        if (typeof converter === 'function') {\n            converter.call(that, numberIn);\n        }\n    }());\n\n    this.toJsNumber = function () {\n        let bits = this.bits;\n        let number = 0;\n\n        bits.forEach(function (value, index) {\n            if(value){\n                number+= Math.pow(2,index);\n            }\n        });\n\n        if(this.isPositive === true) return number;\n\n        return number * (-1);\n    };\n    /**\n     *\n     * @param {BinaryNumberState} n2\n     */\n    this.isEqualValue = function (n2) {\n        if(n2.toString() !== \"[object BinaryNumberState]\"){\n            return false;\n        }\n        return that.bits.every(function (value,index) {\n            return that.bits[index] === n2.bits[index];\n        });\n\n    };\n\n    this.toString = function () {\n        return \"[object BinaryNumberState]\";\n    };\n}\n\nmodule.exports = BinaryNumberState;"]}