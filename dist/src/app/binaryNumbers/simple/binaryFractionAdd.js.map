{"version":3,"sources":["../../../../../src/app/binaryNumbers/simple/binaryFractionAdd.js"],"names":["BinaryNumberState","require","BinaryFraction","binaryAdd","binaryMulti","addBinaryFractions","n1","n2","denominator","isEqualValue","numerator","n1ToFactor","n2ToFactor","module","exports"],"mappings":";;AAAA,IAAIA,oBAAoBC,QAAQ,+BAAR,CAAxB;AACA,IAAIC,iBAAiBD,QAAQ,kBAAR,CAArB;AACA,IAAIE,YAAYF,QAAQ,aAAR,CAAhB;AACA,IAAIG,cAAcH,QAAQ,eAAR,CAAlB;;AAGA;;;;AAIA,SAASI,kBAAT,CAA4BC,EAA5B,EAA+BC,EAA/B,EAAkC;AAC9B,QAAGD,GAAGE,WAAH,CAAeC,YAAf,CAA4BF,GAAGC,WAA/B,CAAH,EAA+C;AAC3C,eAAO,IAAIN,cAAJ,CAAmBC,UAAUG,GAAGI,SAAb,EAAwBH,GAAGG,SAA3B,CAAnB,EAA0DJ,GAAGE,WAA7D,CAAP;AACH;AACD,QAAIG,aAAa,IAAIT,cAAJ,CAAmBE,YAAYE,GAAGI,SAAf,EAA0BH,GAAGC,WAA7B,CAAnB,EAA8DJ,YAAYE,GAAGE,WAAf,EAA2BD,GAAGC,WAA9B,CAA9D,CAAjB;AACA,QAAII,aAAa,IAAIV,cAAJ,CAAmBE,YAAYG,GAAGG,SAAf,EAA0BJ,GAAGE,WAA7B,CAAnB,EAA8DJ,YAAYE,GAAGE,WAAf,EAA2BD,GAAGC,WAA9B,CAA9D,CAAjB;;AAEA,WAAOH,mBAAmBM,UAAnB,EAA8BC,UAA9B,CAAP;AACH;;AAEDC,OAAOC,OAAP,GAAiBT,kBAAjB","file":"binaryFractionAdd.js","sourcesContent":["let BinaryNumberState = require('./low-level/BinaryNumberState');\nlet BinaryFraction = require('./BinaryFraction');\nlet binaryAdd = require('./binaryAdd');\nlet binaryMulti = require('./binaryMulti');\n\n\n/**\n * @param {BinaryFraction} n1\n * @param {BinaryFraction} n2\n */\nfunction addBinaryFractions(n1,n2){\n    if(n1.denominator.isEqualValue(n2.denominator)){\n        return new BinaryFraction(binaryAdd(n1.numerator, n2.numerator), n1.denominator);\n    }\n    let n1ToFactor = new BinaryFraction(binaryMulti(n1.numerator, n2.denominator), binaryMulti(n1.denominator,n2.denominator));\n    let n2ToFactor = new BinaryFraction(binaryMulti(n2.numerator, n1.denominator), binaryMulti(n1.denominator,n2.denominator));\n\n    return addBinaryFractions(n1ToFactor,n2ToFactor);\n}\n\nmodule.exports = addBinaryFractions;"]}