{"version":3,"sources":["../../../../../src/app/binaryNumbers/simple/simpleBinaryDivide.js"],"names":["BinaryNumberState","require","binaryDecrese","binaryIncrese","BinaryFraction","MixedNumber","divide","number","divisor","temp","isPositive","dividesCount","one","toJsNumber","simpleDivide"],"mappings":";;AAAA,IAAIA,oBAAoBC,QAAQ,+BAAR,CAAxB;AACA,IAAIC,gBAAgBD,QAAQ,4BAAR,CAApB;AACA,IAAIE,gBAAgBF,QAAQ,4BAAR,CAApB;AACA,IAAIG,iBAAiBH,QAAQ,kBAAR,CAArB;AACA,IAAII,cAAcJ,QAAQ,gBAAR,CAAlB;;AAEA,SAASK,MAAT,CAAgBC,MAAhB,EAAuBC,OAAvB,EAA+B;AAC3B,QAAIC,OAAO,IAAIT,iBAAJ,CAAsBO,MAAtB,CAAX;AACAE,SAAKC,UAAL,GAAkB,IAAlB;AACA,QAAIC,eAAe,IAAIX,iBAAJ,CAAsB,CAAtB,CAAnB;AACAW,iBAAaD,UAAb,GAA0B,IAA1B;AACA,QAAIE,MAAM,IAAIZ,iBAAJ,CAAsB,CAAtB,CAAV;;AAEA,WAAMS,KAAKI,UAAL,MAAqBL,OAA3B,EAAmC;AAC/BC,eAAOP,cAAcK,MAAd,EAAqBC,OAArB,CAAP;AACAG,uBAAeR,cAAcQ,YAAd,EAA2BC,GAA3B,CAAf;AACH;;AAED,QAAGH,KAAKI,UAAL,OAAsB,CAAzB,EAA2B;AACvB,eAAOF,YAAP;AACH;;AAED,WAAO,IAAIN,WAAJ,EAAP;AAEH;;AAED;;;;;AAKA,SAASS,YAAT,CAAsBP,MAAtB,EAA6BC,OAA7B,EAAqC;AACjC,WAAOF,OAAOC,MAAP,EAAcC,OAAd,CAAP;AACH","file":"simpleBinaryDivide.js","sourcesContent":["let BinaryNumberState = require('./low-level/BinaryNumberState');\nlet binaryDecrese = require('./low-level/binaryDecrease');\nlet binaryIncrese = require('./low-level/binaryIncrease');\nlet BinaryFraction = require('./BinaryFraction');\nlet MixedNumber = require('./MixedNumeral');\n\nfunction divide(number,divisor){\n    let temp = new BinaryNumberState(number);\n    temp.isPositive = true;\n    let dividesCount = new BinaryNumberState(0);\n    dividesCount.isPositive = true;\n    let one = new BinaryNumberState(1);\n\n    while(temp.toJsNumber() >= divisor){\n        temp = binaryDecrese(number,divisor);\n        dividesCount = binaryIncrese(dividesCount,one);\n    }\n\n    if(temp.toJsNumber() === 0){\n        return dividesCount;\n    }\n\n    return new MixedNumber();\n\n}\n\n/**\n * @param {BinaryNumberState} number\n * @param {BinaryNumberState} divisor\n * @return {BinaryNumberState|MixedNumeral}\n */\nfunction simpleDivide(number,divisor){\n    return divide(number,divisor);\n}"]}